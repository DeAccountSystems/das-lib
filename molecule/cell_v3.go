// Generated by Molecule 0.7.5
// Generated by Moleculec-Go 0.1.11

package molecule

import (
	"bytes"
	"errors"
	"strconv"
	"strings"
)

type AccountCellDataV3Builder struct {
	id                       AccountId
	account                  AccountChars
	registered_at            Uint64
	last_transfer_account_at Uint64
	last_edit_manager_at     Uint64
	last_edit_records_at     Uint64
	status                   Uint8
	records                  Records
	enable_sub_account       Uint8
	renew_sub_account_price  Uint64
}

func (s *AccountCellDataV3Builder) Build() AccountCellDataV3 {
	b := new(bytes.Buffer)

	totalSize := HeaderSizeUint * (10 + 1)
	offsets := make([]uint32, 0, 10)

	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.id.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.account.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.registered_at.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.last_transfer_account_at.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.last_edit_manager_at.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.last_edit_records_at.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.status.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.records.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.enable_sub_account.AsSlice()))
	offsets = append(offsets, totalSize)
	totalSize += uint32(len(s.renew_sub_account_price.AsSlice()))

	b.Write(packNumber(Number(totalSize)))

	for i := 0; i < len(offsets); i++ {
		b.Write(packNumber(Number(offsets[i])))
	}

	b.Write(s.id.AsSlice())
	b.Write(s.account.AsSlice())
	b.Write(s.registered_at.AsSlice())
	b.Write(s.last_transfer_account_at.AsSlice())
	b.Write(s.last_edit_manager_at.AsSlice())
	b.Write(s.last_edit_records_at.AsSlice())
	b.Write(s.status.AsSlice())
	b.Write(s.records.AsSlice())
	b.Write(s.enable_sub_account.AsSlice())
	b.Write(s.renew_sub_account_price.AsSlice())
	return AccountCellDataV3{inner: b.Bytes()}
}

func (s *AccountCellDataV3Builder) Id(v AccountId) *AccountCellDataV3Builder {
	s.id = v
	return s
}

func (s *AccountCellDataV3Builder) Account(v AccountChars) *AccountCellDataV3Builder {
	s.account = v
	return s
}

func (s *AccountCellDataV3Builder) RegisteredAt(v Uint64) *AccountCellDataV3Builder {
	s.registered_at = v
	return s
}

func (s *AccountCellDataV3Builder) LastTransferAccountAt(v Uint64) *AccountCellDataV3Builder {
	s.last_transfer_account_at = v
	return s
}

func (s *AccountCellDataV3Builder) LastEditManagerAt(v Uint64) *AccountCellDataV3Builder {
	s.last_edit_manager_at = v
	return s
}

func (s *AccountCellDataV3Builder) LastEditRecordsAt(v Uint64) *AccountCellDataV3Builder {
	s.last_edit_records_at = v
	return s
}

func (s *AccountCellDataV3Builder) Status(v Uint8) *AccountCellDataV3Builder {
	s.status = v
	return s
}

func (s *AccountCellDataV3Builder) Records(v Records) *AccountCellDataV3Builder {
	s.records = v
	return s
}

func (s *AccountCellDataV3Builder) EnableSubAccount(v Uint8) *AccountCellDataV3Builder {
	s.enable_sub_account = v
	return s
}

func (s *AccountCellDataV3Builder) RenewSubAccountPrice(v Uint64) *AccountCellDataV3Builder {
	s.renew_sub_account_price = v
	return s
}

func NewAccountCellDataV3Builder() *AccountCellDataV3Builder {
	return &AccountCellDataV3Builder{id: AccountIdDefault(), account: AccountCharsDefault(), registered_at: Uint64Default(), last_transfer_account_at: Uint64Default(), last_edit_manager_at: Uint64Default(), last_edit_records_at: Uint64Default(), status: Uint8Default(), records: RecordsDefault(), enable_sub_account: Uint8Default(), renew_sub_account_price: Uint64Default()}
}

type AccountCellDataV3 struct {
	inner []byte
}

func AccountCellDataV3FromSliceUnchecked(slice []byte) *AccountCellDataV3 {
	return &AccountCellDataV3{inner: slice}
}
func (s *AccountCellDataV3) AsSlice() []byte {
	return s.inner
}

func AccountCellDataV3Default() AccountCellDataV3 {
	return *AccountCellDataV3FromSliceUnchecked([]byte{114, 0, 0, 0, 44, 0, 0, 0, 64, 0, 0, 0, 68, 0, 0, 0, 76, 0, 0, 0, 84, 0, 0, 0, 92, 0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
}

func AccountCellDataV3FromSlice(slice []byte, compatible bool) (*AccountCellDataV3, error) {
	sliceLen := len(slice)
	if uint32(sliceLen) < HeaderSizeUint {
		errMsg := strings.Join([]string{"HeaderIsBroken", "AccountCellDataV3", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint))}, " ")
		return nil, errors.New(errMsg)
	}

	totalSize := unpackNumber(slice)
	if Number(sliceLen) != totalSize {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "AccountCellDataV3", strconv.Itoa(int(sliceLen)), "!=", strconv.Itoa(int(totalSize))}, " ")
		return nil, errors.New(errMsg)
	}

	if uint32(sliceLen) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"TotalSizeNotMatch", "AccountCellDataV3", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	offsetFirst := unpackNumber(slice[HeaderSizeUint:])
	if uint32(offsetFirst)%HeaderSizeUint != 0 || uint32(offsetFirst) < HeaderSizeUint*2 {
		errMsg := strings.Join([]string{"OffsetsNotMatch", "AccountCellDataV3", strconv.Itoa(int(offsetFirst % 4)), "!= 0", strconv.Itoa(int(offsetFirst)), "<", strconv.Itoa(int(HeaderSizeUint * 2))}, " ")
		return nil, errors.New(errMsg)
	}

	if sliceLen < int(offsetFirst) {
		errMsg := strings.Join([]string{"HeaderIsBroken", "AccountCellDataV3", strconv.Itoa(int(sliceLen)), "<", strconv.Itoa(int(offsetFirst))}, " ")
		return nil, errors.New(errMsg)
	}

	fieldCount := uint32(offsetFirst)/HeaderSizeUint - 1
	if fieldCount < 10 {
		return nil, errors.New("FieldCountNotMatch")
	} else if !compatible && fieldCount > 10 {
		return nil, errors.New("FieldCountNotMatch")
	}

	offsets := make([]uint32, fieldCount)

	for i := 0; i < int(fieldCount); i++ {
		offsets[i] = uint32(unpackNumber(slice[HeaderSizeUint:][int(HeaderSizeUint)*i:]))
	}
	offsets = append(offsets, uint32(totalSize))

	for i := 0; i < len(offsets); i++ {
		if i&1 != 0 && offsets[i-1] > offsets[i] {
			return nil, errors.New("OffsetsNotMatch")
		}
	}

	var err error

	_, err = AccountIdFromSlice(slice[offsets[0]:offsets[1]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = AccountCharsFromSlice(slice[offsets[1]:offsets[2]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint64FromSlice(slice[offsets[2]:offsets[3]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint64FromSlice(slice[offsets[3]:offsets[4]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint64FromSlice(slice[offsets[4]:offsets[5]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint64FromSlice(slice[offsets[5]:offsets[6]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint8FromSlice(slice[offsets[6]:offsets[7]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = RecordsFromSlice(slice[offsets[7]:offsets[8]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint8FromSlice(slice[offsets[8]:offsets[9]], compatible)
	if err != nil {
		return nil, err
	}

	_, err = Uint64FromSlice(slice[offsets[9]:offsets[10]], compatible)
	if err != nil {
		return nil, err
	}

	return &AccountCellDataV3{inner: slice}, nil
}

func (s *AccountCellDataV3) TotalSize() uint {
	return uint(unpackNumber(s.inner))
}
func (s *AccountCellDataV3) FieldCount() uint {
	var number uint = 0
	if uint32(s.TotalSize()) == HeaderSizeUint {
		return number
	}
	number = uint(unpackNumber(s.inner[HeaderSizeUint:]))/4 - 1
	return number
}
func (s *AccountCellDataV3) Len() uint {
	return s.FieldCount()
}
func (s *AccountCellDataV3) IsEmpty() bool {
	return s.Len() == 0
}
func (s *AccountCellDataV3) CountExtraFields() uint {
	return s.FieldCount() - 10
}

func (s *AccountCellDataV3) HasExtraFields() bool {
	return 10 != s.FieldCount()
}

func (s *AccountCellDataV3) Id() *AccountId {
	start := unpackNumber(s.inner[4:])
	end := unpackNumber(s.inner[8:])
	return AccountIdFromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) Account() *AccountChars {
	start := unpackNumber(s.inner[8:])
	end := unpackNumber(s.inner[12:])
	return AccountCharsFromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) RegisteredAt() *Uint64 {
	start := unpackNumber(s.inner[12:])
	end := unpackNumber(s.inner[16:])
	return Uint64FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) LastTransferAccountAt() *Uint64 {
	start := unpackNumber(s.inner[16:])
	end := unpackNumber(s.inner[20:])
	return Uint64FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) LastEditManagerAt() *Uint64 {
	start := unpackNumber(s.inner[20:])
	end := unpackNumber(s.inner[24:])
	return Uint64FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) LastEditRecordsAt() *Uint64 {
	start := unpackNumber(s.inner[24:])
	end := unpackNumber(s.inner[28:])
	return Uint64FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) Status() *Uint8 {
	start := unpackNumber(s.inner[28:])
	end := unpackNumber(s.inner[32:])
	return Uint8FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) Records() *Records {
	start := unpackNumber(s.inner[32:])
	end := unpackNumber(s.inner[36:])
	return RecordsFromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) EnableSubAccount() *Uint8 {
	start := unpackNumber(s.inner[36:])
	end := unpackNumber(s.inner[40:])
	return Uint8FromSliceUnchecked(s.inner[start:end])
}

func (s *AccountCellDataV3) RenewSubAccountPrice() *Uint64 {
	var ret *Uint64
	start := unpackNumber(s.inner[40:])
	if s.HasExtraFields() {
		end := unpackNumber(s.inner[44:])
		ret = Uint64FromSliceUnchecked(s.inner[start:end])
	} else {
		ret = Uint64FromSliceUnchecked(s.inner[start:])
	}
	return ret
}

func (s *AccountCellDataV3) AsBuilder() AccountCellDataV3Builder {
	ret := NewAccountCellDataV3Builder().Id(*s.Id()).Account(*s.Account()).RegisteredAt(*s.RegisteredAt()).LastTransferAccountAt(*s.LastTransferAccountAt()).LastEditManagerAt(*s.LastEditManagerAt()).LastEditRecordsAt(*s.LastEditRecordsAt()).Status(*s.Status()).Records(*s.Records()).EnableSubAccount(*s.EnableSubAccount()).RenewSubAccountPrice(*s.RenewSubAccountPrice())
	return *ret
}
